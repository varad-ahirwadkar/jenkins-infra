@Library('jenkins-upstream-library') _

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.10-3.2'
            args '-v /etc/resolv.conf:/etc/resolv.conf -v /var/run/docker.sock:/var/run/docker.sock'
            label 'jump-vpc-x86_64'
        }
    }
    parameters {
        string(defaultValue: '', description: 'Current Build(quay image or build number)', name: 'CurrentBuild')
        string(defaultValue: '', description: 'Upgrade Build(quay image or build number)', name: 'UpgradeBuild')
        string(defaultValue: '', description: 'Current Build Release', name: 'Release')
        string(defaultValue: '', description: 'Upgrade Build Release', name: 'UpgradeRelease')
        string(defaultValue: '720', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
    }
    environment {
        //users and credentials. All must be defined in Jenkins Credentials
        GITHUB_USER = credentials('GITHUB_USER')
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        OS_USERNAME = credentials('OS_USERNAME')
        OS_PASSWORD = credentials('OS_PASSWORD')
        DOCKER_USER = credentials('DOCKER_USER')
        ARTIFACTORY_USER = credentials('ARTIFACTORY_USER')
        DOCKER_PASSWORD = credentials('ARTIFACTORY_TOKEN')
        REDHAT_USERNAME = credentials('REDHAT_USERNAME')
        REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
        PULL_SECRET = credentials('PULL_SECRET')
        OS_AUTH_URL=credentials('URL_SCNLPOWERCLOUD')

        //Parameters
        OCP_RELEASE="${params.Release}"
        UPGRADE_RELEASE="${params.UpgradeRelease}"
        CONFIG_TYPE="min"
        CURRENT_BUILD="${params.CurrentBuild}"
        UPGRADE_BUILD="${params.UpgradeBuild}"
        TIMEOUT = "${params.KeepFor}"

        //Env constants
        HARDWARE_CHOSE = "P8"
        AVAILABILITY_ZONE = "workload"
        TARGET = "deploy-openshift4-powervc"
        TEMPLATE_FILE = ".${TARGET}.tfvars.template"
        TERRAFORM_VER = "1.2.0"
        POWERVS = false
        SCRIPT_DEPLOYMENT = false
        WAIT_FOR_DEBUG = "0"
        ENABLE_SCALE_TEST="false"
    }

    stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
                script {
                    wrap([$class: 'BuildUser']) {
                        env.INSTANCE_NAME = "rdr-zsnxt"
                    }
                    env.OS_TENANT_NAME="icp-test"
                    env.OS_NETWORK = "workload"
                    env.OS_PRIVATE_NETWORK = "workload"
                    env.SCG_ID = "4366c1e2-bb4f-4c3d-98a2-06cc39bbc58d"
                    env.MOUNT_ETCD_RAMDISK = "false"
                    env.UPGRADE_DELAY_TIME = "600"
                    env.UPGRADE_PAUSE_TIME = "90"
                    env.SETUP_SQUID_PROXY = "true"
                    env.OPENSHIFT_POWERVC_GIT_TF_DEPLOY_BRANCH="main"
                    if (env.OCP_RELEASE == "4.8" || env.OCP_RELEASE == "4.9"){
                        env.REDHAT_RELEASE = "8.4"
                    }
                    else if (env.OCP_RELEASE == "4.10" || env.OCP_RELEASE == "4.11"){
                        env.REDHAT_RELEASE = "8.5"
                    }
                    else {
                        env.REDHAT_RELEASE = "8.6"
                    }
                }
            }
        }
        stage('pull artifact') {
            steps {
                script {
                    getArtifacts("powervm/poll-powervc-images", "rhcos-${OCP_RELEASE}-powercloud-latest.txt")
                    getArtifacts("powervm/poll-powervc-images", "rhel-${REDHAT_RELEASE}-powercloud-latest.txt")
                }
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        gbToMb()
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        sh(returnStdout: false, script: "apt update && apt install docker docker.io jq -y")
                        if (env.CURRENT_BUILD?.trim()) {
                            if (!env.CURRENT_BUILD.contains('quay')) {
                                env.OPENSHIFT_IMAGE  = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${env.CURRENT_BUILD}"
                                sh '''
                                    docker login sys-powercloud-docker-local.artifactory.swg-devops.com -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
                                    docker pull ${OPENSHIFT_IMAGE}
                                    if [ $? -ne 0 ]; then
                                        echo "${OPENSHIFT_IMAGE} not found"
                                        exit 1
                                    fi
                                '''
                            }
                            else {
                               env.OPENSHIFT_IMAGE=env.CURRENT_BUILD
                            }
                        }
                        else {
                            echo "CURRENT build is empty"
                            throw err
                        }
                        env.UPGRADE_IMAGE = ""
                        if (env.UPGRADE_BUILD?.trim()) {
                            if (!env.UPGRADE_BUILD.contains('quay')) {
                                env.UPGRADE_IMAGE  = "sys-powercloud-docker-local.artifactory.swg-devops.com/ocp-ppc64le/release-ppc64le:${env.UPGRADE_BUILD}"
                                sh '''
                                    docker login sys-powercloud-docker-local.artifactory.swg-devops.com -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
                                    docker pull ${UPGRADE_IMAGE}
                                    if [ $? -ne 0 ]; then
                                        echo "${UPGRADE_IMAGE} not found"
                                        exit 1
                                    fi
                                '''
                            }
                            else {
                               env.UPGRADE_IMAGE=env.UPGRADE_BUILD
                            }
                        }
                        else{
                            echo "Upgrade build is empty"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/rhcos-${OCP_RELEASE}-powercloud-latest.txt")) {
                            env.RHCOS_IMAGE = readFile "deploy/artifactory/rhcos-${OCP_RELEASE}-powercloud-latest.txt"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE.split()[0].trim()
                            env.RHCOS_IMAGE_ID = env.RHCOS_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "rhcos-${OCP_RELEASE}-powercloud-latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/rhel-${REDHAT_RELEASE}-powercloud-latest.txt")) {
                            env.BASTION_IMAGE = readFile "deploy/artifactory/rhel-${REDHAT_RELEASE}-powercloud-latest.txt"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE.split()[0].trim()
                            env.BASTION_IMAGE_ID = env.BASTION_IMAGE.split()[1].trim()
                        }
                        else {
                            echo "rhel-${REDHAT_RELEASE}-powercloud-latest.txt file does not exist. Please check poll-powervc-images job"
                            throw err
                        }
                        if (env.DEPLOY_MASTER == "false")
                        {
                            echo "Cluster cant deploy without master"
                            throw err
                        }
                        
                        createTemplate(env.OS_AUTH_URL, env.MASTER_VCPUS , "${MASTER_MEMORY_MB}", env.MASTER_PROCESSORS, env.MASTER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.WORKER_VCPUS , "${WORKER_MEMORY_MB}", env.WORKER_PROCESSORS, env.WORKER_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BASTION_VCPUS , "${BASTION_MEMORY_MB}", env.BASTION_PROCESSORS, env.BASTION_TEMPLATE)
                        createTemplate(env.OS_AUTH_URL, env.BOOTSTRAP_VCPUS , "${BOOTSTRAP_MEMORY_MB}", env.BOOTSTRAP_PROCESSORS, env.BOOTSTRAP_TEMPLATE)
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment()
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Run crontab script for capturing outputs of multiple commands') {
            steps {
                crontabCommandCaptureScript()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Validate CO status') {
            steps {
                validateCoStatus()
            }
        }
        stage('Gather pprof and prometheus data') {
            steps {
                gatherPrometheusData()
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                            TIMEOUT_MIN = TIMEOUT.toInteger()
                            if ( TIMEOUT_MIN != 0 )
                            {
                                TIMEOUT_SEC=TIMEOUT_MIN*60
                                echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                                sleep TIMEOUT_SEC
                            }
                        }
                    catch (err) {
                            echo 'Error ! Timeout stage failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                try{
                    archiveAllArtifacts("deploy/vars.tfvars", "cpu-pre.pprof", "heap-pre.pprof", "prometheus.tar.gz", "deploy/cron.log", "must-gather.tar.gz")
                    cleanupOcp4Cluster()
                    checkInfraError()
                    notifyBySlack(currentBuild.result, env.MESSAGE)
                }
                catch (err){
                    echo 'Error ! Always block failed!'
                }
                finally{
                    cleanWs()
                }
            }
        }
    }
}
